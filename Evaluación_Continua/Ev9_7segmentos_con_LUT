.include "m328pdef.inc"

.org 0x0000
rjmp start

configurar:
	ldi r20, 0x3F
	out DDRB, r20

	ldi r20, 0x04
	out DDRC, r20

	ldi r20, 0x03
	out PORTC, r20
	call guardar_codigos
	ret

start:
   ;Stack Pointer
    ldi r16, HIGH(RAMEND)
	out SPH, r16
	ldi r16, LOW(RAMEND)
	out SPL, r16

	call configurar

	ldi r16, 0
main_loop:
   ;espera el start (un pc0)
wait_start:
   sbic PINC, 0
   rjmp wait_start
   rcall debounce
wait_release:
   sbis PINC, 0
   rjmp wait_release
   rcall debounce
count_loop:
   ;muestra numero actual
   mov r20, r16
   call get_7seg_code
   call_set_7seg_u
   rcall delay_2s

  ;chequea stop (en pc1)
   sbis PINC, 1
   rjmp continue_count
   rcall de bounce
wait_stop:
   sbis PINC, 1
   rjmp wait_stop
   rcall debounce
   rjmp main_loop
continue_count:
   inc r16
   cpi r16, 10
   brlo count_loop
   ldi r16, 0
   rjmp count_loop

;SUBRUTINAS
get_7seg_code:
	ldi r28,0x00 ;LOW(0x0100)
	ldi r29,0x01 ;HIGH(0x0100)
	add r28,r20
	ld r20, Y
	ret

set_7seg_u:
;SEGMENTOS A-F
    mov r21,r20          
    andi r21,0x3F      
    out PORTB,r21
;SEGMENTO G EN PC2
    mov r21,r20          
    sbrc r21,6           
    sbi PORTC,2        
    sbrs r21,6        
    cbi PORTC,2         

    ret

guardar_codigos:
	ldi r28, 0x00 ;LOW(0x0100)
	ldi r29, 0x01 ;HIGH(0x0100)
	ldi r20,0b00111111 ;cargamos el 0
	ST Y+, r20
	ldi r20,0b00000110 ;cargamos el 1
	ST Y+, r20
	ldi r20,0b01011011 ;cargamos el 2
	ST Y+, r20
	ldi r20,0b01001111 ;cargamos el 3
	ST Y+, r20
	ldi r20,0b01100110  ;cargamos el 4
	ST Y+, r20
	ldi r20,0b01101101 ;cargamos el 5
	ST Y+, r20
	ldi r20,0b01111101 ;cargamos el 6
	ST Y+, r20
	ldi r20,0b00000111 ;cargamos el 7
	ST Y+, r20
	ldi r20, 0b01111111 ;cargamos el 8
	ST Y+, r20
	ldi r20,0b01101111 ;cargamos el 9
	ST Y+, r20
	ret

debounce:
    ldi r23,200
d1: dec r23
    brne d1
    ret

delay_2s:
    ldi r24, 100      ; bucle externo
del1:
    ldi r22, 255     ; bucle medio
del2:
    ldi r23, 255     ; bucle interno
del3:
    dec r23
    brne del3
    dec r22
    brne del2
    dec r24
    brne del1
    ret

