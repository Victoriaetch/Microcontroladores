#include <avr/io.h>
#include <util/delay.h>

#define BUTTON_FASTER  PD2
#define BUTTON_SLOWER  PD3

uint16_t delay_time = 500; // Retardo inicial ms

uint8_t led_shift[]      = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
uint8_t led_sequential[] = {0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};
uint8_t led_extremes[]   = {0x81,0x42,0x24,0x18,0x18,0x24,0x42,0x81};

// Función de retardo con variable
void my_delay_ms(uint16_t ms) {
    for(uint16_t i=0; i<ms; i++) {
        _delay_us(1000); // 1 ms
    }
}

void check_buttons() {
    if (!(PIND & (1<<BUTTON_FASTER))) {
        if (delay_time > 50) delay_time -= 50;
        _delay_ms(50); // antirrebote
    }
    if (!(PIND & (1<<BUTTON_SLOWER))) {
        if (delay_time < 2000) delay_time += 50;
        _delay_ms(50); // antirrebote
    }
}

void show_sequence(uint8_t *seq) {
    for(uint8_t i=0; i<8; i++) {
        PORTB = seq[i];
        my_delay_ms(delay_time);  // <-- usar función propia
        check_buttons();
    }
}

int main(void) {
    DDRB = 0xFF; // LEDs como salida
    DDRD &= ~((1<<BUTTON_FASTER)|(1<<BUTTON_SLOWER)); // botones entrada

    while(1) {
        show_sequence(led_shift);
        show_sequence(led_sequential);
        show_sequence(led_extremes);
    }
}

