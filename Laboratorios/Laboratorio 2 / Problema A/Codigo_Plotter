#include <avr/io.h>
#include <util/delay.h>
#include <math.h>
#include <stdio.h>

// Definición de pines del puerto D
#define BAJA_SOLENOIDE  2    // Pin PD2: activa el solenoide hacia abajo
#define SUBIR_SOLENOIDE 3    // Pin PD3: activa el solenoide hacia arriba
#define MOV_ABAJO       4    // Pin PD4: motor en dirección abajo
#define MOV_ARRIBA      5    // Pin PD5: motor en dirección arriba
#define MOV_DERECHA     6    // Pin PD6: motor en dirección derecha
#define MOV_IZQUIERDA   7    // Pin PD7: motor en dirección izquierda

#define F_CPU 16000000UL
#define BAUD 9600
#define UBRR_VAL ((F_CPU + 8UL * BAUD) / (16UL * BAUD) - 1)


// Prototipos de funciones
void inicializar_puertos(void);
void inicializar_serial(void);
char leer_comando_serial(void);

void mostrar_menu(void):

void mover_izquierda(void);
void mover_derecha(void);
void mover_arriba (void);
void mover_abajo(void);
void subir_solenoide(void);
void bajar_solenoide(void);

void dibujar_triangulo(void);
void dibujar_cruz(void);
void dibujar_circulo(void);
void dibujar_todos(void);

void dibujar_gato(void);
void dibujar_rana (void);

void procesar_comando(char comando);

// Función para printf
int uart_putchar(char c, FILE *stream);

FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);

// Función principal
int main(void) {
	inicializar_puertos();  // FALTABA ESTA LLAMADA!!!
	inicializar_serial();
	
	_delay_ms(1000); // Pequeño delay para estabilizar

	stdout = &uart_output;  // ¡IMPORTANTE: Configurar stdout para printf!

	printf("!Plotter inicializado exitosamente!\n");
	printf("~~ Bienvenido al sistema de control del plotter ~~\n");

	mostrar_menu();            // muestra menu con todas las opciones

	while(1) {
		char comando = leer_comando_serial();
		if(comando != 0) {
			procesar_comando(comando);
		}
	}
	
	return 0;
}

// Inicialización de puertos
void inicializar_puertos(void) {
    DDRD = 0b11111100; // deja PD0 y PD1 como entradas (UART)
	PORTD = 0x00; // Inicializar todos los pines en bajo
}

// Inicialización comunicación serial
void inicializar_serial(void) {
	
	 UBRR0H = (unsigned char)(UBRR_VAL  >> 8);
	 UBRR0L = (unsigned char)UBRR_VAL ;
	 
	 // Habilitar transmisor y receptor
	 UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	 
	 // Configurar formato: 8 bits de datos, 1 bit de stop, sin paridad
	 UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 }

// Leer comando desde el monitor serial MEJORADA
char leer_comando_serial(void) {
	if (UCSR0A & (1 << RXC0))
	return UDR0;
	else
	return 0;
}

// Función para printf
int uart_putchar(char c, FILE *stream) {
	if (c == '\n') {
		uart_putchar('\r', stream);
	}
	
	// Espera hasta que el buffer de transmisión esté vacío
	while (!(UCSR0A & (1 << UDRE0)));
	
	// Enviar carácter
	UDR0 = c;
}

//-----MENU-----
void mostrar_menu(void) {
	printf("~~~~ MENU PRINCIPAL ~~~~ \n");
	printf("1 = Dibujar triángulo\n");
	printf("2 = Dibujar cruz\n");
	printf("3 = Dibujar círculo\n");
	printf("T = Dibujar todas las figuras\n");
	printf("FIGURAS ESPECIALES:\n");
	printf("G = Dibujar gato\n");
	printf("R = Dibujar rana\n");
	printf("MOVIMIENTOS DE SELECCIÓN MANUAL:\n");
	printf("A = Mover izquierda\n");
	printf("D = Mover derecha\n");
	printf("W = Mover arriba\n");
	printf("S = Mover abajo\n");
	printf("O = Subir solenoide\n");
	printf("L = Bajar solenoide\n");
	printf("~~~~~~~~~~~~~~~~~~~~~~~~~~ \n");
}

//----- FUNCIONES DE POSICIONAMIENTO/DIBUJO MANUAL PARA EL USUARIO -----
//Mover izquierda
void mover_izquierda(void) {
	printf("Moviendo a la izquierda...\n");
	PORTD |= (1 << MOV_IZQUIERDA);
	_delay_ms(8000);
	PORTD &= ~(1 << MOV_IZQUIERDA);
	printf("LISTO\n");
}

//Mover derecha
void mover_derecha(void) {
	printf("Moviendo a la derecha...\n");
	PORTD |= (1 << MOV_DERECHA);
	_delay_ms(5000);
	PORTD &= ~(1 << MOV_DERECHA);
	printf("LISTO\n");
}

//Mover arriba
void mover_arriba(void) {
	printf("Moviendo hacia arriba...\n");
	PORTD |= (1 << MOV_ARRIBA);
	_delay_ms(5000);
	PORTD &= ~(1 << MOV_ARRIBA);
	printf("LISTO\n");
}

//Mover abajo
void mover_abajo(void) {
	printf("Moviendo hacia abajo...\n");
	PORTD |= (1 << MOV_ABAJO);
	_delay_ms(8000);
	PORTD &= ~(1 << MOV_ABAJO);
	printf("LISTO\n");
}

//Funciones para bajar/subir solenoide manualmente
//Baja solenoide
void subir_solenoide(void) {
	printf("Subiendo solenoide...\n");
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~(1 << SUBIR_SOLENOIDE);
	printf("LISTO\n");	
}

//Baja solenoide
void bajar_solenoide(void) {
	printf("Bajando solenoide...\n");
	PORTD |= (1 << BAJA_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~(1 << BAJA_SOLENOIDE);
	printf("LISTO\n");
}

//----- FUNCIONES FIGURAS GEOMETRICAS -----
// Triángulo 
void dibujar_triangulo(void) {
	printf("Dibujando triangulo...\n");
	
	// Bajar solenoide
	PORTD |= (1 << BAJA_SOLENOIDE);
	_delay_ms(500);
	
	// Cateto vertical
	for(int i = 0; i < 100; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}

	// Cateto horizontal
	for(int i = 0; i < 100; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}

	// Hipotenusa 
	for(int i = 0; i < 100; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}
		
	// Subir solenoide
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));
	
	// Mover (para no dibujar encima de las demas figuras cuando se elije dibujar todas)
	for(int i = 0; i < 200; i++) {
			PORTD |= (1 << MOV_IZQUIERDA);
			_delay_ms(700);
			PORTD &= ~(1 << MOV_IZQUIERDA);
			_delay_ms(200);
		}
	
	printf("Triangulo completado!\n");
}

// Cruz
void dibujar_cruz(void) {
	printf("Dibujando cruz...\n");
	
	// Bajar solenoide
	PORTD |= (1 << BAJA_SOLENOIDE);
	_delay_ms(500);
	
	// Línea vertical hacia abajo
	for(int i = 0; i < 100; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}
	
	// Volver al centro (arriba)
	for(int i = 0; i < 50; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	
	// Línea horizontal completa (izquierda + derecha)
	for(int i = 0; i < 50; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
	for(int i = 0; i < 100; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}
	
	for(int i = 0; i < 50; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
	
	// Subir solenoide
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(500);
	PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));
	
	// Ir al centro
	for(int i = 0; i < 150; i++) {
	PORTD |= (1 << MOV_IZQUIERDA);
	_delay_ms(1000);
	PORTD &= ~(1 << MOV_IZQUIERDA);
	_delay_ms(1000);
	}
	
	printf("Cruz completada!\n");
}

void dibujar_circulo(void) {
	printf("Dibujando círculo...\n");

	// Bajar solenoide
	PORTD |= (1 << BAJA_SOLENOIDE);
	_delay_ms(500);

	const float radio = 50.0;     // radio en "pasos"
	const int puntos = 150;

	float x_ant = radio, y_ant = 0;

	for (int i = 1; i <= puntos; i++) {
		float angulo = 2 * M_PI * i / puntos;
		float x = radio * cos(angulo);
		float y = radio * sin(angulo);

		int dx = round(x - x_ant);
		int dy = round(y - y_ant);

		// Mover en X
		if (dx > 0) {
			for (int j = 0; j < dx; j++) {
				PORTD |= (1 << MOV_DERECHA);
				_delay_ms(600);
				PORTD &= ~(1 << MOV_DERECHA);
				_delay_ms(600);
			}
			} else if (dx < 0) {
			for (int j = 0; j < -dx; j++) {
				PORTD |= (1 << MOV_IZQUIERDA);
				_delay_ms(600);
				PORTD &= ~(1 << MOV_IZQUIERDA);
				_delay_ms(600);
			}
		}

		// Mover en Y
		if (dy > 0) {
			for (int j = 0; j < dy; j++) {
				PORTD |= (1 << MOV_ABAJO);
				_delay_ms(600);
				PORTD &= ~(1 << MOV_ABAJO);
				_delay_ms(600);
			}
			} else if (dy < 0) {
			for (int j = 0; j < -dy; j++) {
				PORTD |= (1 << MOV_ARRIBA);
				_delay_ms(600);
				PORTD &= ~(1 << MOV_ARRIBA);
				_delay_ms(600);
			}
		}

		x_ant = x;
		y_ant = y;
	}

	// Subir solenoide
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));

	printf("Círculo completado!\n");
}

//Dibujar todas las figuras geometricas
void dibujar_todos(void) {
	dibujar_triangulo();
	_delay_ms(1000);
	
	dibujar_cruz();
	_delay_ms(1000);
	
	dibujar_circulo();
	_delay_ms(1000);
}

//------- GATO ---------
void dibujar_gato(void) {
	printf("Dibujando gato...\n");
	
	// Ajustar este valor según la calibración
	int pasos_por_cm = 12.5; // ASUMO: 1 cm = 25 pasos
	
	// Bajar solenoide
	PORTD |= (1 << BAJA_SOLENOIDE);
	_delay_ms(800);

    // ---------- CUERPO ----------
	for (int i = 0; i < 5 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}

	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_DERECHA );
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_DERECHA ));
		_delay_ms(100);
	}

	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}

	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_DERECHA );
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 <<  MOV_DERECHA ));
		_delay_ms(100);
	}

	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}

	for (int i = 0; i < 4 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_DERECHA );
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_DERECHA ));
		_delay_ms(100);
	}
	
	for (int i = 0; i < 4 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 3 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_DERECHA));
		_delay_ms(100);
	}
		
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_DERECHA );
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_DERECHA ));
		_delay_ms(100);
	}	
	
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}   
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_DERECHA));
		_delay_ms(100);
	}
		 
	for (int i = 0; i < 3 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_DERECHA );
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_DERECHA ));
		_delay_ms(100);
	}	

	for (int i = 0; i < 4 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}   
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_DERECHA));
		_delay_ms(100);
	}	 
	 
	for (int i = 0; i < 4 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}

	for (int i = 0; i < 2  * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}

	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_DERECHA));
		_delay_ms(100);
	}
		
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}

	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_DERECHA));
		_delay_ms(100);
	}
	
	for (int i = 0; i < 6 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}    

	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
		
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}   
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}  
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
		
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}

	for (int i = 0; i < 1  * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}
		
	for (int i = 0; i < 5 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1  * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}	
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}   
		
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}	
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}  
		
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	} 
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}	
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}  
		
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}   
	
	for (int i = 0; i < 1  * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}	
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}   
		
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_DERECHA );
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_DERECHA ));
		_delay_ms(100);
	}
		 
	for (int i = 0; i < 5 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	
	// ---------- PATITAS ----------
	// Subir solenoide
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));
	
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}
		
	// Bajar solenoide
	PORTD |= (1 << BAJA_SOLENOIDE);
	_delay_ms(800);
	
	for (int i = 0; i < 5 * pasos_por_cm; i++) { 
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_DERECHA));
		_delay_ms(100);
	}
	 
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}
	
	 for (int i = 0; i < 5 * pasos_por_cm; i++) {
	 	PORTD |= (1 << MOV_DERECHA);
	 	_delay_ms(500);
	 	PORTD &= ~(1 << MOV_DERECHA);
	 	_delay_ms(100);
 	}
	 	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_DERECHA );
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_DERECHA ));
		_delay_ms(100);
	}
	 
	for (int i = 0; i < 5 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	 
	 // Subir solenoide
	 PORTD |= (1 << SUBIR_SOLENOIDE);
	 _delay_ms(800);
	 PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));
	 
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}
		 
	 // Bajar solenoide
	 PORTD |= (1 << BAJA_SOLENOIDE);
	 _delay_ms(800);
	 
	for (int i = 0; i < 5 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}

	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_DERECHA );
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_DERECHA ));
		_delay_ms(100);
	}
		
	// ---------- BOCA ----------
	// Subir solenoide
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));
		
	for (int i = 0; i < 11 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
					
	for (int i = 0; i < 5 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
	 // Bajar solenoide
	 PORTD |= (1 << BAJA_SOLENOIDE);
	 _delay_ms(800);	 
	 
	for (int i = 0; i < 1  * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}
		
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
			
	for (int i = 0; i < 1  * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}
		
	// ---------- NARIZ ----------
	// Subir solenoide
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));
	 
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		 PORTD |= (1 << MOV_DERECHA);
		 _delay_ms(500);
		 PORTD &= ~(1 << MOV_DERECHA);
		 _delay_ms(100);
	 }
	 	  
	 // Bajar solenoide
	 PORTD |= (1 << BAJA_SOLENOIDE);
	 _delay_ms(800);
	 
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}
			   
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
	 	_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
	  	_delay_ms(100);
	}
	  	
	for (int i = 0; i < 3 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_DERECHA));
		_delay_ms(100);
	}

	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}
	  
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
		  
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}	  
	
	for (int i = 0; i < 7 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
	 	_delay_ms(500);
	 	PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	  
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}
	
	 for (int i = 0; i < 1 * pasos_por_cm; i++) {
	      PORTD |= (1 << MOV_ABAJO);
	      _delay_ms(500);
	      PORTD &= ~(1 << MOV_ABAJO);
	      _delay_ms(100);
      }

	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 2  * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ABAJO) | (1 << MOV_IZQUIERDA));
		_delay_ms(100);
	}

	for (int i = 0; i < 2  * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA) | (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~((1 << MOV_ARRIBA) | (1 << MOV_DERECHA));
		_delay_ms(100);
	}

	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_DERECHA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_DERECHA);
		_delay_ms(100);
	}
	
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ABAJO);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ABAJO);
		_delay_ms(100);
	}
	  
    // ---------- OJOS ----------
	// Subir solenoide
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));

  	for (int i = 0; i < 3 * pasos_por_cm; i++) {
	  	PORTD |= (1 << MOV_ARRIBA);
	  	_delay_ms(500);
	  	PORTD &= ~(1 << MOV_ARRIBA);
	  	_delay_ms(100);
  	}
  
	// Bajar solenoide
	PORTD |= (1 << BAJA_SOLENOIDE);
	_delay_ms(800);
	 	   
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}
	
  	for (int i = 0; i < 1 * pasos_por_cm; i++) {
	  	PORTD |= (1 << MOV_ARRIBA);
	  	_delay_ms(500);
	  	PORTD &= ~(1 << MOV_ARRIBA);
	  	_delay_ms(100);
  	}
  	
  	for (int i = 0; i < 1 * pasos_por_cm; i++) {
	  	PORTD |= (1 << MOV_DERECHA);
	  	_delay_ms(500);
	  	PORTD &= ~(1 << MOV_DERECHA);
	  	_delay_ms(100);
  	}
	  
  	for (int i = 0; i < 1 * pasos_por_cm; i++) {
	  	PORTD |= (1 << MOV_ABAJO);
	  	_delay_ms(500);
	  	PORTD &= ~(1 << MOV_ABAJO);
	  	_delay_ms(100);
  	}
	  
  	for (int i = 0; i < 2 * pasos_por_cm; i++) {
	  	PORTD |= (1 << MOV_IZQUIERDA);
	  	_delay_ms(500);
	  	PORTD &= ~(1 << MOV_IZQUIERDA);
	  	_delay_ms(100);
  	}
  
	for (int i = 0; i < 2 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	
  	for (int i = 0; i < 2 * pasos_por_cm; i++) {
	  	PORTD |= (1 << MOV_DERECHA);
	  	_delay_ms(500);
	  	PORTD &= ~(1 << MOV_DERECHA);
	  	_delay_ms(100);
  	}

 	for (int i = 0; i < 2 * pasos_por_cm; i++) {
	 	PORTD |= (1 << MOV_ABAJO);
	 	_delay_ms(500);
	 	PORTD &= ~(1 << MOV_ABAJO);
	 	_delay_ms(100);
 	}
 	
	// Subir solenoide
	PORTD |= (1 << SUBIR_SOLENOIDE);
	_delay_ms(800);
	PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));

    for (int i = 0; i < 2 * pasos_por_cm; i++) {
	    PORTD |= (1 << MOV_DERECHA);
	   	_delay_ms(500);
	   	PORTD &= ~(1 << MOV_DERECHA);
	   	_delay_ms(100);
   	}
	   
	// Bajar solenoide
	PORTD |= (1 << BAJA_SOLENOIDE);
	_delay_ms(800); 
	
	 for (int i = 0; i < 2 * pasos_por_cm; i++) {
	 	PORTD |= (1 << MOV_ARRIBA);
	 	_delay_ms(500);
	 	PORTD &= ~(1 << MOV_ARRIBA);
	 	_delay_ms(100);
	 }
	 	
   	for (int i = 0; i < 2 * pasos_por_cm; i++) {
    	PORTD |= (1 << MOV_DERECHA);
    	_delay_ms(500);
    	PORTD &= ~(1 << MOV_DERECHA);
    	_delay_ms(100);
   	}
	   
   	for (int i = 0; i < 1 * pasos_por_cm; i++) {
	   	PORTD |= (1 << MOV_ABAJO);
	   	_delay_ms(500);
	   	PORTD &= ~(1 << MOV_ABAJO);
	   	_delay_ms(100);
   	}
  
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}

 	for (int i = 0; i < 1 * pasos_por_cm; i++) {
	 	PORTD |= (1 << MOV_ABAJO);
	 	_delay_ms(500);
	 	PORTD &= ~(1 << MOV_ABAJO);
	 	_delay_ms(100);
 	}

	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_IZQUIERDA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_IZQUIERDA);
		_delay_ms(100);
	}

   	for (int i = 0; i < 2 * pasos_por_cm; i++) {
     	PORTD |= (1 << MOV_DERECHA);
    	_delay_ms(500);
	   	PORTD &= ~(1 << MOV_DERECHA);
	   	_delay_ms(100);
     }
	 
	for (int i = 0; i < 1 * pasos_por_cm; i++) {
		PORTD |= (1 << MOV_ARRIBA);
		_delay_ms(500);
		PORTD &= ~(1 << MOV_ARRIBA);
		_delay_ms(100);
	}
	  
	 // Subir solenoide
	 PORTD |= (1 << SUBIR_SOLENOIDE);
	 _delay_ms(800);
	 PORTD &= ~((1 << BAJA_SOLENOIDE) | (1 << SUBIR_SOLENOIDE));
	 
	 printf("Gato completado!\n");
	
}



// Procesar comando del usuario
void procesar_comando(char comando) {
	switch(comando) {
		
		case '1':
		dibujar_triangulo();
		break;
		
		case '2':
		dibujar_cruz();
		break;
		
		case '3':
		dibujar_circulo();
		break;
		
		case 't':
		case 'T':
		dibujar_todos();
		break;
		
		case 'g':
		case 'G':
		dibujar_gato();
		break;

		default:
		printf("Comando no reconocido: %c\n", comando);
		printf("Usar: 1=Triangulo, 2=Cruz, 3=Circulo, G= Gato t=Todos, \n");
		break;
	}
}

