.include "m328pdef.inc"

.def tmp     = r16

.cseg
.org 0x0000
    rjmp RESET


RESET:

    ldi tmp, high(RAMEND)
    out SPH, tmp
    ldi tmp, low(RAMEND)
    out SPL, tmp

    ; Configurar PORTD como salida 
    ldi tmp, 0xFF
    out DDRD, tmp
    ; poner inicialmente 0
    ldi tmp, 0x00
    out PORTD, tmp

    ldi r31, high(LUT)   ; ZH
    ldi r30, low(LUT)    ; ZL

    ldi endH, high(LUT + 256)
    ldi endL, low(LUT + 256)


    ldi tmp, low(78)
    sts OCR1AL, tmp
    ldi tmp, high(78)
    sts OCR1AH, tmp

    ; TCCR1A: normal port operation (0)
    ldi tmp, 0
    sts TCCR1A, tmp

    ; TCCR1B: WGM12 = 1, prescaler = /8 -> CS12:0 = 010 (CS11 = 1)
    ldi tmp, (1<<WGM12) | (1<<CS11)
    sts TCCR1B, tmp

    ; Asegurarnos que la bandera está limpia
    ; Escribiendo 1 en OCF1A limpia la bandera
    ldi tmp, (1<<OCF1A)
    out TIFR1, tmp



main_loop:
    ; Esperar a que OCF1A (Compare A) se ponga (polling)
wait_flag:
    in tmp, TIFR1
    sbrs tmp, OCF1A       ; si bit OCF1A = 0 -> saltar siguiente instrucción (sbrs salta si bit SET)
    rjmp wait_flag       ; si OCF1A = 0, seguir esperando

    ; Limpiar la bandera escribiendo 1 en OCF1A
    ldi tmp, (1<<OCF1A)
    out TIFR1, tmp

    ; Cargar la siguiente muestra desde Flash: LPM Z+
    lpm sample, Z+        ; sample = [Z]; Z = Z + 1

    ; Volcar al puerto (salida digital al R-2R)
    out PORTD, sample

    ; Si Z == LUT + 256 -> resetear Z a inicio
    cp r30, endL
    cpc r31, endH
    brne main_loop       ; si no son iguales, continuar el loop (brne hace salto cuando Z != end)
    ; Igual -> reiniciar Z
    ldi r31, high(LUT)
    ldi r30, low(LUT)
    rjmp main_loop

; -----------------------
; LUT: 256 bytes en memoria de programa
; -----------------------

LUT:
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
