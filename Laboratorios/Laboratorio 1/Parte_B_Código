; =================================================================
; Parte B: Matriz de LEDs
; =================================================================
.include "m328pdef.inc"

.equ ANCHO_MSG = 136         ; total columnas del mensaje (HOLIS con separadores)
.equ FRAME_STEP = 80        ; frames por paso de scroll (ajustar velocidad)

.equ F_CPU = 16000000
.equ BAUD = 9600
.equ UBRR_VALUE = (F_CPU/16/BAUD-1)

.def fila      = r20       ; 0..7
.def columnas  = r21       ; byte que se enviará a los pines de columna
.def indice    = r22
.def flags     = r23
.def deb_der   = r24
.def deb_izq   = r25

.def offset    = r26       ; desplazamiento del scroll (columna dentro del mensaje)
.def framecnt  = r27       ; contador de frames para velocidad
.def ancho     = r28
.def mask      = r29       ; máscara temporal para extraer bit por fila

.def opcion_actual = r16
.def temp          = r17
.def op_temp = r18

.cseg
.org 0x0000
    rjmp inicio

; ===================== POWERPUFF GIRLS =====================
colbuf:
.db 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
.db  0b00000000, 0b01111111, 0b01001000, 0b01001000, 0b01001000, 0b00110000, 0b00000000, 0b00000000
.db 0b00000000, 0b00111110, 0b01000001, 0b01000001, 0b01000001, 0b01000001, 0b00111110, 0b00000000
.db 0b00000000, 0b01111111, 0b00000001, 0b00000010, 0b00000100, 0b00000010, 0b01111111, 0b00000000
.db 0b00000000, 0b00000000, 0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, 0b00000000
.db 0b00000000, 0b01111111, 0b01001000, 0b01001100, 0b01001010, 0b00110001, 0b00000000, 0b00000000
.db 0b00000000, 0b01111111, 0b01001000, 0b01001000, 0b01001000, 0b00110000, 0b00000000, 0b00000000
.db 0b00000000, 0b01111110, 0b00000001, 0b00000001, 0b00000001, 0b00000001, 0b01111110, 0b00000000
.db 0b00000000, 0b01111111, 0b01001000, 0b01001000, 0b01001000, 0b01000000, 0b00000000, 0b00000000
.db 0b00000000, 0b01111111, 0b01001000, 0b01001000, 0b01001000, 0b01000000, 0b00000000, 0b00000000
.db 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
.db 0b00000000, 0b00111110, 0b01001001, 0b01001001, 0b01001001, 0b00100110, 0b00000000, 0b00000000
.db 0b00000000, 0b00000000, 0b01000001, 0b01000001, 0b01111111, 0b01000001, 0b01000001, 0b00000000
.db 0b00000000, 0b01111111, 0b01001000, 0b01001100, 0b01001010, 0b00110001, 0b00000000, 0b00000000
.db 0b00000000, 0b01111111, 0b00000001, 0b00000001, 0b00000001, 0b00000001, 0b00000000, 0b00000000
.db 0b00000000, 0b00000000, 0b00110010, 0b01001001, 0b01001001, 0b01001001, 0b00100110, 0b00000000
.db 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000

; ===================== Strings para UART =====================
WelcomeMsg: .db "Bienvenido a la matriz LED",0x0D, 0x0A, 0
MenuMsg: .db "Seleccione una opcion:",0x0D, 0x0A, 0
MenuOpciones: .db "1: Mensaje desplazante 2: Carita Feliz 3: Corazon" 0x0D, 0x0A, 0
; =================== Inicio ===================
inicio:
    ; Stack
    ldi  r16, high(RAMEND)
    out  SPH, r16
    ldi  r16, low(RAMEND)
    out  SPL, r16

    ldi  r16, 0xFC           ; DDRD: PD7..PD2 como salidas (filas), PD0/PD1 libres
    out  DDRD, r16
    ldi  r16, 0x3F           ; DDRB: PB0..PB5 salidas (filas PB0..PB1 y cols PB2..PB5)
    out  DDRB, r16
    ldi  r16, 0x3C           ; DDRC: PC2..PC5 salidas (cols PC2..PC5)
    out  DDRC, r16

    ; Inicializa puertos a off (filas apagadas = altas en filas, columnas apagadas = 0)
    ldi r16, 0xFF
    out PORTD, r16
    ldi r16, 0xFF
    out PORTB, r16
    ldi r16, 0xFF
    out PORTC, r16

    ; Estado inicial scroll
    clr offset
    clr framecnt
    ldi ancho, ANCHO_MSG
; UART
    ldi temp, high(UBRR_VALUE)
    sts UBRR0H, temp
    ldi temp, low(UBRR_VALUE)
    sts UBRR0L, temp
    ldi temp, (1<<RXEN0)|(1<<TXEN0)
    sts UCSR0B, temp
    ldi temp, (1<<UCSZ01)|(1<<UCSZ00)
    sts UCSR0C, temp

    ; GPIO
    ldi temp, 0xFF
    out DDRB, temp      ; puerto B salida (LEDs test)

    clr opcion_actual

    ; Mostrar menú inicial
	    rcall MostrarMenu

	 ldi r16,0xFC
    out DDRD,r16
    ldi r16,0x3F
    out DDRB,r16
    ldi r16,0x3C
    out DDRC,r16

    ; Poner todos los pines en HIGH (apagado)
    ldi r16,0xFF
    out PORTD,r16
    out PORTB,r16
    out PORTC,r16

    ; Apagar columnas y filas explícitamente
    rcall apagar_filas
    rcall apagar_columnas
	
	; Inicializar variables
    clr offset
    clr framecnt
    ldi ancho,ANCHO_MSG
    clr columnas
    clr fila
    ldi mask,0b10000000

    ; Retardo inicial para asegurar LEDs apagados
    ldi r16,0xFF

main_loop:
	rcall UART_CheckReceive

    cpi opcion_actual,1
    breq scroll
    cpi opcion_actual,2
    breq cara
    cpi opcion_actual,3
    breq corazon

    rjmp main_loop

scroll:
scroll_loop:
    rcall UART_CheckReceive   ; revisar si cambió la opción

    cpi opcion_actual, 2
    breq main_loop            ; si es 2, salir al main
    cpi opcion_actual, 3
    breq main_loop            ; si es 3, salir al main
    rcall multiplexar_una_vez
inc framecnt
cpi framecnt, 150
brlo skip_offset
clr framecnt
inc offset
cpi offset,(ANCHO_MSG-7)
brlo skip_offset
clr offset
skip_offset:
    rjmp scroll_loop

cara:
cara_loop:
    rcall UART_CheckReceive
    cpi opcion_actual,1
    breq main_loop
    cpi opcion_actual,3
    breq main_loop

    rcall mostrar_carita
    rjmp cara_loop

corazon:
cor_loop:
    rcall UART_CheckReceive
    cpi opcion_actual,1
    breq main_loop
    cpi opcion_actual,2
    breq main_loop

    rcall mostrar_corazon
    rjmp cor_loop

mostrar_carita:
    ; Columna 0
    ldi columnas, 0x3C
    ldi fila, 0
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 1
    ldi columnas, 0x42
    ldi fila, 1
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 2
    ldi columnas, 0xA5
    ldi fila, 2
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 3
    ldi columnas, 0x81
    ldi fila, 3
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 4
    ldi columnas, 0xA5
    ldi fila, 4
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 5
    ldi columnas, 0x99
    ldi fila, 5
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 6
    ldi columnas, 0x42
    ldi fila, 6
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas
    ; Columna 7
    ldi columnas, 0x3C
    ldi fila, 7
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ret
mostrar_corazon:
    ; Columna 0
    ldi columnas, 0x00
    ldi fila, 0
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 1
    ldi columnas, 0x66
    ldi fila, 1
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 2
    ldi columnas, 0xFF
    ldi fila, 2
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 3
    ldi columnas, 0xFF
    ldi fila, 3
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

 	; Columna 4
    ldi columnas, 0x7E
    ldi fila, 4
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 5
    ldi columnas, 0x3C
    ldi fila, 5
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 6
    ldi columnas, 0x18
    ldi fila, 6
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ; Columna 7
    ldi columnas, 0x00
    ldi fila, 7
    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    ret

multiplexar_una_vez:
    ldi fila,0
    ldi mask,0b10000000
sig_fila:
    ldi ZH, high(colbuf)
    ldi ZL, low(colbuf)
    mov r16, offset
    add ZL,r16
    clr r16
    adc ZH,r16

    clr columnas
    ldi r19,8
col_loop:
    lpm r18,Z+
    lsl columnas
    mov r16,r18
    and r16,mask
    breq no_setbit
    ori columnas,0x01
no_setbit:
    dec r19
    brne col_loop

    rcall cargar_columnas
    rcall seleccionar_fila
    rcall retardo_fila
    rcall apagar_filas
    rcall apagar_columnas

    inc fila
    lsr mask
    cpi fila,8
    brlo sig_fila
    ret

cargar_columnas:
    in   r16, PORTB
    andi r16, 0xC3                 ; limpia PB2..PB5 
    clr  r17                       ; acumulador PB2..PB5

    ; bit7 (col1) -> PB2 (bit2): >>5
    mov  r18, columnas
    andi r18, 0x80
    lsr  r18
    lsr  r18
    lsr  r18
    lsr  r18
    lsr  r18
    or   r17, r18

    ; bit6 (col2) -> PB3 (bit3): >>3
    mov  r18, columnas
    andi r18, 0x40
    lsr  r18
    lsr  r18
    lsr  r18
    or   r17, r18

    ; bit5 (col3) -> PB4 (bit4): >>1
    mov  r18, columnas
    andi r18, 0x20
    lsr  r18
    or   r17, r18

    ; bit4 (col4) -> PB5 (bit5): <<1
    mov  r18, columnas
    andi r18, 0x10
    lsl  r18
    or   r17, r18

     or   r16, r17
    out  PORTB, r16

    in   r16, PORTC
    andi r16, 0xC3            
    mov  r17, columnas
    andi r17, 0x0F            
    lsl  r17
    lsl  r17                    
    andi r17, 0x3C             
    or   r16, r17
    out  PORTC, r16
    ret

	seleccionar_fila:
    rcall apagar_filas
    mov  r16, fila
    cpi  r16, 0x06
    brlo fila_PD
    in   r17, PORTB
    cpi  r16, 0x06
    breq fila_PB0
    andi r17, 0xFD      
    out  PORTB, r17
    ret

fila_PB0:
    andi r17, 0xFE     
    out  PORTB, r17
    ret

fila_PD:
    ldi  r17, 0x01
    add  r16, r17
    add  r16, r17
    in   r18, PORTD
    ldi  r19, 0x01
shift_bit:
    dec  r16
    brmi bit_ok
    lsl  r19
    rjmp shift_bit
bit_ok:
    com  r19
    and  r18, r19
    out  PORTD, r18
    ret
apagar_filas:
    in   r16, PORTD
    ori  r16, 0xFC    
    out  PORTD, r16
    in   r16, PORTB
    ori  r16, 0x03    
    out  PORTB, r16
    ret

apagar_columnas:
    in   r16, PORTB
    andi r16, 0xC3    
    out  PORTB, r16
    in   r16, PORTC
    andi r16, 0xC3   
    out  PORTC, r16
    ret

retardo_fila:
    ldi r16, 0xFF   ; mayor valor para ralentizar
retardo_lp:
    dec r16
    brne retardo_lp
    ret

; ===================== UART =====================
UART_CheckReceive:
    lds temp,UCSR0A
    sbrs temp,RXC0
    ret          ; si no hay dato recibido, salir
    lds temp,UDR0
    cpi temp,'1'
    breq set1
    cpi temp,'2'
    breq set2
    cpi temp,'3'
    breq set3
    ret

set1:
    ldi opcion_actual,1
    ret
set2:
    ldi opcion_actual,2
    ret
set3:
    ldi opcion_actual,3
    ret

UART_Transmit:
    lds temp,UCSR0A
    sbrs temp,UDRE0
    rjmp UART_Transmit
    sts UDR0,r18
    ret

UART_SendString:
    lpm r18,Z+
    cpi r18,0
    breq fin_str
    rcall UART_Transmit
    rjmp UART_SendString
fin_str:
    ret

MostrarMenu:
    ldi ZH,high(WelcomeMsg<<1)
    ldi ZL,low(WelcomeMsg<<1)
    rcall UART_SendString
    ldi ZH,high(MenuMsg<<1)
    ldi ZL,low(MenuMsg<<1)
    rcall UART_SendString
    ldi ZH,high(MenuOpciones<<1)
    ldi ZL,low(MenuOpciones<<1)
    rcall UART_SendString
    ret
