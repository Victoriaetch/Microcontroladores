; =================================================================
; Parte D/E: Plotter
; =================================================================
.include "m328Pdef.inc"

.equ F_CPU = 16000000
.equ BAUD_RATE = 9600
.equ UBRR_VAL = (F_CPU/16/BAUD_RATE)-1

.equ BAJA_SOLENOIDE  = 2    ; D2 - X0
.equ SUBIR_SOLENOIDE = 3    ; D3 - X1
.equ MOV_ABAJO       = 4    ; D4 - X5
.equ MOV_ARRIBA      = 5    ; D5 - X6
.equ MOV_DERECHA     = 6    ; D6 - X7
.equ MOV_IZQUIERDA   = 7    ; D7 - X10

.def temp = r16
.def contador = r17
.def opcion_actual = r18

.cseg
.org 0x0000
    jmp RESET

; =================================================================
; MENSAJES DEL MENU (Monitor serial)
; =================================================================
BienvenidoMsg: .db "Bienvenido al sistema de dibujo", 0x0D, 0x0A, 0
MenuMsg .db "Seleccione una opcion: ", 0x0D, 0x0A, 0
MenuOpciones .db "1: Triangulo  2: Cruz  T: Ambas figuras ", 0x0D, 0x0A, 0
FiguraMsg .db "Dibujando Figura...", 0x0D, 0x0A, 0

; =================================================================
; INICIALIZACIÓN
; =================================================================
RESET:
    ; Inicia stack pointer
    ldi temp, high(RAMEND)
    out SPH, temp
    ldi temp, low(RAMEND)
    out SPL, temp

    ;Inicia UART
    ldi temp, high (UBRR_VAL)
    sts UBRR0H, temp
    ldi temp, low (UBRR_VAL)
    sts UBRR0L, temp
    ldi temp, (1<<RXEN0)|(1<<TXEN0)
    sts UCDR0B, temp
    ldi temp, (1<<UCSZ01)|(1<<UCSZ00)
    sts UCSR0C, temp

    ; Configurar puerto D como salida
    ldi temp, 0b11111100
    out DDRD, temp
    ldi temp, 0x00
    out PORTD, temp
    
    ; LED de prueba en PB5
    sbi DDRB, 5
    cbi PORTB, 5

    clr opcion_actual

    ; Asegurar que el solenoide esté SUBIDO al inicio
    call SUBIR_SOLENOIDE_COMPLETO

    ; Mostrar menú inicial
    rcall MostrarMenu

    ldi r24, low(3000)
    ldi r25, high(3000)
    rcall DELAY_MS

; =================================================================
; LOOP PRINCIPAL
; =================================================================
MAIN:
    rcall UART_CheckReceive
    cpi opcion_actual, '1'
    breq ejecutar_triangulo
    cpi opcion_actual, '2'
    breq ejecutar_cruz
    cpi opcion_actual, 'T'
    breq ejecutar_ambas
    cpi opcion_actual, 't'
    breq ejecutar_ambas

    rjmp MAIN

ejecutar_triangulo:
    ; LED ON
    sbi PORTB, 5
    
    ldi ZH, high(FiguraMsg<<1)
    ldi ZL, low(FiguraMsg<<1)
    rcall UART_SendString
    ldi ZH, high(TrianguloMsg<<1)
    ldi ZL, low(TrianguloMsg<<1)
    rcall UART_SendString

    call MOVER_AL_CENTRO
    ldi r24, low(3000)
    ldi r25, high(3000)
    rcall DELAY_MS
    call TRIANGULO

    ; Asegurar solenoide subido al finalizar
    call SUBIR_SOLENOIDE_COMPLETO
    
    ; LED OFF
    cbi PORTB, 5
    clr opcion_actual
    rcall MostrarMenu
    rjmp MAIN

ejecutar_cruz:
    ; LED ON
    sbi PORTB, 5
    
    ldi ZH, high(FiguraMsg<<1)
    ldi ZL, low(FiguraMsg<<1)
    rcall UART_SendString
    ldi ZH, high(CruzMsg<<1)
    ldi ZL, low(CruzMsg<<1)
    rcall UART_SendString

    call MOVER_AL_CENTRO
    ldi r24, low(5000)
    ldi r25, high(5000)
    rcall DELAY_MS
    call CRUZ
    
    ; Asegurar solenoide subido al finalizar
    call SUBIR_SOLENOIDE_COMPLETO

    ; LED OFF
    cbi PORTB, 5
    clr opcion_actual
    rcall MostrarMenu
    rjmp MAIN

ejecutar_ambas:
    ; LED ON
    sbi PORTB, 5
    
    ldi ZH, high(FiguraMsg<<1)
    ldi ZL, low(FiguraMsg<<1)
    rcall UART_SendString
    ldi ZH, high(AmbasMsg<<1)
    ldi ZL, low(AmbasMsg<<1)
    rcall UART_SendString
    
    call MOVER_AL_CENTRO
    ldi r24, low(3000)
    ldi r25, high(3000)
    rcall DELAY_MS
    call TRIANGULO
    
	call MOVER_AL_CENTRO
    ldi r24, low(3000)
    ldi r25, high(3000)
    rcall DELAY_MS
    call CRUZ
    
    ; Asegurar solenoide subido al finalizar
    call SUBIR_SOLENOIDE_COMPLETO
    
    ; LED OFF
    cbi PORTB, 5
    clr opcion_actual
    rcall MostrarMenu
    rjmp MAIN

; =================================================================
; SUBRUTINAS DE MOVIMIENTO
; =================================================================
MOVER_AL_CENTRO:
    ; Asegurar que el solenoide esté SUBIDO durante el movimiento hacia el centro
    call SUBIR_SOLENOIDE_COMPLETO

    ldi r24, low(5000)
    ldi r25, high(5000)

    ; Mover a la izquierda
    sbi PORTD, MOV_IZQUIERDA
    rcall DELAY_MS
    cbi PORTD, MOV_IZQUIERDA
    rcall DELAY_MS

    ; Mover abajo
    sbi PORTD, MOV_ABAJO
    rcall DELAY_MS
    cbi PORTD, MOV_ABAJO

    ; Pequeña pausa final
    ldi r24, low(3000)
    ldi r25, high(3000)
    rcall DELAY_MS
    ret

SUBIR_SOLENOIDE_COMPLETO:
    ; Asegurarse de que el solenoide esté completamente subido
    cbi PORTD, BAJA_SOLENOIDE  ; Apagar bajada
    sbi PORTD, SUBIR_SOLENOIDE ; Activar subida
    ldi r24, low(3000)         ; Tiempo suficiente para subir
    ldi r25, high(3000)
    rcall DELAY_MS
    cbi PORTD, SUBIR_SOLENOIDE ; Apagar subida
    ret

BAJAR_SOLENOIDE_COMPLETO:
    ; Asegurarse de que el solenoide esté completamente bajado
    cbi PORTD, SUBIR_SOLENOIDE ; Apagar subida
    sbi PORTD, BAJA_SOLENOIDE  ; Activar bajada
    ldi r24, low(3000)         ; Tiempo suficiente para bajar
    ldi r25, high(3000)
    rcall DELAY_MS
    cbi PORTD, BAJA_SOLENOIDE  ; Apagar bajada
    ret

TRIANGULO:
    ; Activar solenoide para dibujar
    call BAJAR_SOLENOIDE_COMPLETO

    ldi r24, low(3000)
    ldi r25, high(3000)
    rcall DELAY_MS

    ; Dibujar triángulo
    sbi PORTD, MOV_ABAJO
    rcall DELAY_MS
    cbi PORTD, MOV_ABAJO
    rcall DELAY_MS

    sbi PORTD, MOV_IZQUIERDA
    rcall DELAY_MS
	cbi PORTD, MOV_IZQUIERDA
    rcall DELAY_MS

    sbi PORTD, MOV_DERECHA
    sbi PORTD, MOV_ARRIBA
    rcall DELAY_MS
    cbi PORTD, MOV_DERECHA
    cbi PORTD, MOV_ARRIBA
    rcall DELAY_MS

    ; Levantar lápiz
    call SUBIR_SOLENOIDE_COMPLETO
    ret

CRUZ:
    ; Bajar solenoide para dibujar
    call BAJAR_SOLENOIDE_COMPLETO

    ldi r24, low(3000)
    ldi r25, high(3000)
    rcall DELAY_MS

    ; Dibujar cruz (vertical)
    sbi PORTD, MOV_ARRIBA
    rcall DELAY_MS
    cbi PORTD, MOV_ARRIBA
    rcall DELAY_MS

    sbi PORTD, MOV_ARRIBA
    rcall DELAY_MS
    cbi PORTD, MOV_ARRIBA
    rcall DELAY_MS

    sbi PORTD, MOV_ABAJO
    rcall DELAY_MS
    cbi PORTD, MOV_ABAJO
    rcall DELAY_MS

    sbi PORTD, MOV_ABAJO
    rcall DELAY_MS
    cbi PORTD, MOV_ABAJO
    rcall DELAY_MS

    sbi PORTD, MOV_ABAJO
    rcall DELAY_MS
    cbi PORTD, MOV_ABAJO
    rcall DELAY_MS

    sbi PORTD, MOV_ARRIBA
    rcall DELAY_MS
    cbi PORTD, MOV_ARRIBA
    rcall DELAY_MS

    ; Dibujar cruz (horizontal)

    sbi PORTD, MOV_IZQUIERDA
    rcall DELAY_MS
    cbi PORTD, MOV_IZQUIERDA
    rcall DELAY_MS

    sbi PORTD, MOV_DERECHA
    rcall DELAY_MS
    cbi PORTD, MOV_DERECHA
    rcall DELAY_MS

    sbi PORTD, MOV_DERECHA
    rcall DELAY_MS
    cbi PORTD, MOV_DERECHA
    rcall DELAY_MS

    ; Levantar lápiz
    call SUBIR_SOLENOIDE_COMPLETO
    ret

; =================================================================
; RUTINAS UART
; =================================================================
UART_CheckReceive:
    lds temp, UCSR0A
	sbrs temp, RXC0
	ret
	lds opcion_actual, UDR0
	ret

UART_Transmit:
	lds temp, UCSR0A
	sbrs temp, UDRE0
	rjmp UART_Transmit
	sts UDR0, r18
	ret

UART_SendString:
	lpm r18, Z+
	cpi r18, 0
	breq fin_str
	rcall UART_Transmit
	rcall UART_SendString
fin_str:
	ret

MostrarMenu:
    ldi ZH, high(BienvenidoMsg<<1)
    ldi ZH, low(BienvenidoMsg<<1)
	rcall UART_SendString
    ldi ZH, high(MenuMsg<<1)
    ldi ZH, low(MenuMsg<<1)
	rcall UART_SendString
    ldi ZH, high(MenuOpciones<<1)
    ldi ZH, low(MenuOpciones<<1)
	rcall UART_SendString
	ret

; =================================================================
; DELAY EN MILISEGUNDOS
; ================================================================
DELAY_MS:
    push r24
    push r25
    push r26
    push r27
DELAY_MS_LOOP:
    sbiw r24, 1
    brne DELAY_MS_INNER
    pop r27
    pop r26
    pop r25
    pop r24
    ret
DELAY_MS_INNER:
    ldi r26, low(16000/4)
    ldi r27, high(16000/4)
DELAY_MS_INNER_LOOP:
    sbiw r26, 1
    brne DELAY_MS_INNER_LOOP
    rjmp DELAY_MS_LOOP

; ======================
; Mensajes adicionales
; ======================
TrianguloMsg:  .db "Triangulo seleccionado",0x0D,0x0A,0
CruzMsg:       .db "Cruz seleccionada",0x0D,0x0A,0
AmbasMsg:      .db "Ambas figuras seleccionadas",0x0D,0x0A,0




